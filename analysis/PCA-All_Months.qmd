---
title: "PCA-All_Months"
author: "Jiashu Chen"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r, warning=FALSE, message=FALSE}
# Load Packages
library(tidyverse)
library(ggfortify)
library(vegan)
library(lubridate)
library(ggfortify)
library(ggrepel)
library(patchwork)
#library(factoextra)
# Set Working Directory
setwd("/Users/jiashuchen/salmon-research/sp23-salmon-research/analysis")

```

```{r, warning=FALSE, message=FALSE}
# Load Data Sets
lag21_hab_may_oct <- read_csv("LAG21_Habitat_May_Oct.csv")
lag21_shelter <- read_csv("LAG21_InstreamShelter.csv")

#Filter to retain only May sites
#Clean up data, calculate Vol, max_temp, max_do, max_vel, max_rctdepth

#Remove space and parentheses
names(lag21_hab_may_oct) <- str_replace_all(names(lag21_hab_may_oct), c(" " = "", "\\(DD/MM/YY\\)" = ""))
#Remove space and parentheses
names(lag21_shelter) <- str_replace_all(names(lag21_shelter), c(" " = "", "\\(0\\-3\\)" = ""))


# view(lag21_hab_may_oct)
# lag21_hab_may_oct[7, 2] = '02/05/21' 
# temp0 <- lag21_hab_may_oct %>% 
#   #mutate(SiteName = str_replace(SiteName, "DG1", "DG")) %>%
#   filter(!grepl("^SG|^DG1", SiteName)) %>% 
#   inner_join(lag21_hab_may_oct, 
#              by = join_by(SiteName == SiteName)) %>% 
#   drop_na(Length_m.x) %>% 
#   select(c("SiteName","Length_m.x", -"Length_m.y", str_replace_all(colnames(lag21_hab_may_oct)[c(-1, -3)], "$", ".y"))) %>%
#   view()
# 
# temp1 <- lag21_hab_may_oct %>% #add the edge cases
#   filter(grepl("^SG", SiteName), Date != '16/10/21') %>% 
#   inner_join(lag21_hab_may_oct, 
#              by = join_by(SiteName == SiteName)) %>% 
#   drop_na(Length_m.x) %>% 
#   select(c("SiteName","Length_m.x", -"Length_m.y", str_replace_all(colnames(lag21_hab_may_oct)[c(-1, -3)], "$", ".y"))) %>%
#   rbind(lag21_hab_may_oct %>% 
#           filter(grepl("^SG", lag21_hab_may_oct$SiteName) & Date == '16/10/21') | grepl("^DG1", lag21_hab_may_oct$StieName)) %>% 
#   view()
# 
# colnames(temp1) <- str_replace_all(colnames(lag21_hab_may_oct)[-1], "$", ".y")
# 
# view(temp1) 
  
# Converts irregular data entries into average of their numeric values.
# "5.5 (a) and 4.5 (b)" => mean(c(5.5, 4.5))
convert_to_avg <- function(col) {
  
   result = c()
   for (cell in col) {
     
      if (any(str_detect(cell, "\\d+ \\(.*\\)"), na.rm = T)) {
        num = as.double(unlist(str_extract_all(cell, "(\\d+\\.\\d+)")))
        cell = mean(num)
      } else if (any(str_detect(cell, "\\d+m"), na.rm = T)) {
        num = as.double(unlist(str_extract_all(cell, "\\d+")))
        cell = mean(num)
      }
     
      result = c(result, cell)
   }
   return(result)
}

get_site <- function(col) {
  result <- c()
  for (i in col) {
    i <- str_sub(str_extract(i,"^\\w+\\-"), 1, -2)
    #print(i)
    if (i == "DG") {
      i <- "DG1"
    }
    result = c(result, i)
  }
  return(result)  
}

# Only select the first date entry a cell (before &). Convert character columns into date columns. Change 31 of May to 1 of June and April dates to May
clean_date <- function(date) {
  date <- ifelse(str_detect(date, "&"), str_replace(date, ".+& ", ''), date)
  date <- ifelse(str_detect(date, "/0?4/"), str_replace(date, "/0?4/", "/05/"), date) #Replace april with may
  date <- ifelse(str_detect(date, "^31/0?5/"), str_replace(date, "^31/0?5/", "1/06/"), date) #Replace may 31 with jun 1.
  date <- dmy(date)
  return(date)
}

#Clean up data and select useful data columns
###Replaced na with 0###
###DG1 => DG###
clean_lag21_hab_shelter <- lag21_hab_may_oct  %>% 
  drop_na(Date) %>%
  mutate(Site = as.factor(get_site(SiteName))) %>% 
  mutate(Date = clean_date(Date)) %>% 
  mutate(DO_Percent = convert_to_avg(DO_Percent),
         Temperature_C = convert_to_avg(Temperature_C)) %>%
  #Length_m = convert_to_avg(Length_m),
  mutate(Month = as.factor(month(Date))) %>% 
  # mutate(Month = month(Date),
  #        Month = case_when(
  #          Month == 4 ~ 5,
  #          TRUE ~ Month
  #        )) %>% 
  mutate(SiteName = str_replace(SiteName, "^DG-", "DG1-")) %>% 
  mutate(across(c(Width3_m, Length_m), as.double)) %>% 
  ###Repeat any empty length with previous values.###
  mutate(Length_m = case_when(
    SiteName == "DG1-SEQ1-2021" ~ 7.1,
    SiteName == "DG1-SEQ2-2021" ~ 5.6,
    SiteName %in% c("DG1-SEQ3-2021", "DG-SEQ3-2021")  ~ 6.3,
    SiteName == "LAG1-SEQ1-2021" ~ 30.5,
    SiteName == "LAG1-SEQ2-2021" ~ 18,
    SiteName == "LAG1-SEQ3-2021" ~ 37,
    SiteName == "LAG2-SEQ1-2021" ~ 11.1,
    SiteName == "LAG2-SEQ2-2021" ~ 34.5,
    SiteName == "LAG2-SEQ3-2021" ~ 22.7,
    SiteName == "OL-SEQ1-2021" ~ 13.4,
    SiteName == "OL-SEQ2-2021" ~ 22.1,
    SiteName == "OL-SEQ3-2021" ~ 17.8, 
    SiteName == "SG-SEQ1-2021" & Month != 10 ~ 9.5,
    SiteName == "SG-SEQ2-2021" & Month != 10 ~ 40.3,
    SiteName == "SG-SEQ3-2021" & Month != 10 ~ 58.4, 
    #SG has seq1 Octobor absent from the dataframe. Dried?
    SiteName == "SG-SEQ2-2021" & Month == 10 ~ 18, #11 + 7 = 18 18 / 2 = 9
    SiteName == "DG-SEQ2-2021" & Month == 10 ~ 2.5,
    SiteName == "DG-SEQ1-2021" & Month == 10 ~ 2.6,  #Don't know DG vs DG1
    TRUE ~ Length_m
    )) %>%
  arrange(Month, SiteName) %>%
  rowwise() %>% 
  mutate(Max_vel = max(replace_na(c_across(c(Vel0_ms, 
                                  Vel1_ms, 
                                  Vel2_ms, 
                                  Vel3_ms, 
                                  Vel4_ms, 
                                  Vel5_ms)),
                                  0), 
                       na.rm = T)) %>%
  mutate(Median_width_m = mean(c_across(c(Width0_m, 
                                     Width1_m,
                                     Width2_m, 
                                     Width3_m, 
                                     Width4_m,
                                     Width5_m)),
                          na.rm = T)) %>% 
  mutate(Median_depth_m = median(c_across(c(Depth0_cm, 
                                     Depth1_cm,
                                     Depth2_cm, 
                                     Depth3_cm,
                                     Depth4_cm,
                                     Depth5_cm)),
                          na.rm = T) / 100) %>% 
  mutate(Vol_m3 = Length_m * Median_depth_m * Median_width_m) %>%
  left_join(lag21_shelter, #Use left join to preserve major data rows.
             by = join_by(SiteName == SiteName),
             suffix = c('.hab', '.shelter')) %>%
  mutate(Canopy_total = (Canopy_Head + Canopy_Mid) / 2,  
         DO_Percent = as.double(DO_Percent),
         Temperature_C = as.double(Temperature_C)) %>% 
  select(SiteName, Date, Month, Vol_m3, 
         Temperature_C, DO_Percent,
         Max_vel, RCTdepth_cm, Site, Length_m) %>% #exclude shelter and canopy
  
  drop_na(Temperature_C)

#replace(is.na(.), 0)] 
view(clean_lag21_hab_shelter)
write_csv(clean_lag21_hab_shelter, "CLEAN_habitat.csv")
```

```{r}
#PCA Chunk
clean_habitat <- read_csv("CLEAN_habitat.csv")
clean_habitat <- clean_habitat %>% 
  mutate(Month = as.factor(Month)) %>% 
 mutate(Site = as.factor(Site))
all_month_pca <- clean_habitat %>% 
 select(-SiteName, -Date, -Month, -Site, -Length_m) %>% 
 prcomp(scale = T)

all_month_pca$x #pc scores
#scores(all_month_pca$rotation)
#biplot(all_month_pca, scale = 0) #preliminary plot 
#autoplot(all_month_pca, data = clean_habitat, colour = 'Site', shape = 'Month', loadings = #TRUE, loadings.label = TRUE)

```

Make prettier background, color, legends, label bigger, pca arrow prettier

Install packages -

Color blind friendly colors --

Embed vectors or else

Track site seq shifts with arrows (one graph for each site)

Shorten pc name and move label around -

```{r}
# Graph PCA
safe_colorblind_palette <- c("#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288", "#AA4499", 
                             "#44AA99", "#999933", "#882255", "#661100", "#6699CC", "#888888")
graph_pca <- clean_habitat
graph_pca$pc1 <- all_month_pca$x[,1]
graph_pca$pc2 <- all_month_pca$x[,2]

p <- ggplot(data = graph_pca, 
            aes(x = pc1, 
                y = pc2, 
                color = Site,
                shape = Month)) +
  geom_point(size = 3, 
             alpha = 0.9, 
             fill = "black") +  ### need to do stuff here
  scale_color_manual(values = safe_colorblind_palette) +
  coord_equal() + 
  xlab("PC 1") +
  ylab("PC 2") +
  #labs(title = "All Month PCA") +
  theme_minimal() + 
  theme(legend.key.height = unit(2, 'mm'),
        legend.key.width = unit(2, 'mm'),
        legend.position = 'left',
        plot.title = element_text(hjust = 0.5)
        ) 

# Construction variable contribution plot
# Source https://tem11010.github.io/Plotting-PCAs/

pca_vars <- all_month_pca$rotation %>% data.frame
pca_vars$vars <- rownames(pca.vars)
pca_vars_long <- pca_vars %>% 
  pivot_longer(
    cols = !vars,
    names_to = "PC"
  )

                             
# Source https://tem11010.github.io/Plotting-PCAs/
circleFun <- function(center, diameter, npoints) {
  r = diameter / 2
  tt <- seq(0,2*pi,length.out = npoints)
  xx <- center[1] + r * cos(tt)
  yy <- center[2] + r * sin(tt)
  return(data.frame(x = xx, y = yy))
}

circ <- circleFun(c(0,0),2,npoints = 500)

# Plot variable contribution
vars_p <- ggplot() +
  geom_path(data = circ, aes(x,y), lty = 2, color = "grey", alpha = 0.7) +
  geom_hline(yintercept = 0, lty = 2, color = "grey", alpha = 0.9) +
  geom_vline(xintercept = 0, lty = 2, color = "grey", alpha = 0.9) + 
  geom_segment(data = pca_vars, 
               aes(x = 0, xend = pca_vars$PC1,
                   y = 0, yend = pca_vars$PC2,
                   color = as.factor(pca_vars$vars)),
               arrow = arrow(length = unit(0.025, "npc"),
                             type = "open"),
               lwd = 1) + 
  scale_color_manual(values = safe_colorblind_palette) +
  # geom_text_repel(data = pca_vars,
  #           aes(x = pca_vars$PC1 * 1.15,
  #               y = pca_vars$PC2 * 1.15,
  #               label = as.vector(pca_vars$vars))
  #           ) +
  xlab("PC 1") +
  ylab("PC 2") +
  labs(color = "Principle Component Vectors") +
  coord_equal() + 
  theme_minimal()
  



p + vars_p + plot_layout(widths = c(3, 1), heights = c(5, 1), guides = "collect")
#p + inset_element(vars_p, left = 0.6, bottom = 0.6, right = 1, top = 1)
# geom_text(data = pca_vars,
#             aes(x = pca_vars$PC1 * 1.15,
#                 y = pca_vars$PC2 * 1.15,
#                 label = as.vector(pca_vars$vars),
#                 size = )) +

```

```{r}
# Explore tracing arrows
safe_colorblind_palette <- c("#88CCEE", "#CC6677", "#DDCC77", "#117733", "#332288", "#AA4499", 
                             "#44AA99", "#999933", "#882255", "#661100", "#6699CC", "#888888")
graph_pca <- clean_habitat
graph_pca$pc1 <- all_month_pca$x[,1]
graph_pca$pc2 <- all_month_pca$x[,2]



```
